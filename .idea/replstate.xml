<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1449498060917">{:repl-history {:ide [], :local [&quot;(re-find #\&quot;Virus\&quot; \&quot;Icebreaker - Ai- Virus\&quot;)&quot; &quot;(pprint (get-in @state :runner))&quot; &quot;(pprint (get-in @state [:runner]))&quot; &quot;(pprint (get-in @state [:runner :rig]))&quot; &quot;(use 'test.core :reload)&quot; &quot;(us)&quot; &quot;UnsupportedOperationException&quot; &quot;(pprint (get-in @state [:corp]))&quot; &quot;(run-has-flag? state :no-rez-ice)&quot; &quot;(pprint (get-in @state [:register]))&quot; &quot;(get-in state [:register :current-run :no-rez-ice])&quot; &quot;(get-in @state [:register :current-run :no-rez-ice])&quot; &quot;(get-in @state [:regis])&quot; &quot;(state)&quot; &quot;(pprint )&quot; &quot;(run-flag state nil nil :can-rez-ice)&quot; &quot;(core/run-flag? state nil nil :can-rez-ice)&quot; &quot;(get-in @state [:stack :current-run])&quot; &quot;(use 'game.core :reload)&quot; &quot;(game.core/run-flag? state nil nil :can-rez-ice)&quot; &quot;(do (load-file \&quot;src/clj/game/core.clj\&quot;) (game.core/run-flag? state nil nil :can-rez-ice))&quot; &quot;(get-in @state [:stack :current-run flag])&quot; &quot;((get-in @state [:stack :current-run :can-rez-ice]))&quot; &quot;(#(get-in @state [:stack :current-run :can-rez-ice :condition]) state nil nil)&quot; &quot;#(get-in @state [:stack :current-run :can-rez-ice :condition])&quot; &quot;#((get-in @state [:stack :current-run :can-rez-ice :condition]) % % %)&quot; &quot;(#((get-in @state [:stack :current-run :can-rez-ice :condition]) % % %) state nil nil)&quot; &quot;(#((get-in @state [:stack :current-run :can-rez-ice :condition]) %1 %2 %3) state nil nil)&quot; &quot;(get-in @state [:stack :current-run :can-rez-ice ])&quot; &quot;(peek (get-in @state [:stack :current-run :can-rez-ice :condition]))&quot; &quot;(fn [state side card]\n  ( (constantly false)\n    (system-msg state side (str \&quot;is prevented from rezzing ICE on this run by \&quot;\n                                (:title card))))\n  )&quot; &quot;((fn [state side card]\n  ( (constantly false)\n    (system-msg state side (str \&quot;is prevented from rezzing ICE on this run by \&quot;\n                                (:title card))))\n  ))&quot; &quot;((fn [state side card]\n  ( (constantly false)\n    (system-msg state side (str \&quot;is prevented from rezzing ICE on this run by \&quot;\n                                (:title card))))\n  ) state nil nil)&quot; &quot;(for [\n      condition-result (#(get-in @state [:stack :current-run flag :condition]) state side card)\n      :when condition-result\n      ]\n  [condition-result])&quot; &quot;(for [\n      condition-result (#(get-in @state [:stack :current-run :can-rez-ice :condition]) state side card)\n      :when condition-result\n      ]\n  [condition-result])&quot; &quot;(for [\n      condition-result (get-in @state [:stack :current-run :can-rez-ice :condition])\n      :when condition-result\n      ]\n  [condition-result])&quot; &quot;(for [\n      condition-result (get-in @state [:stack :current-run :can-rez-ice :condition])\n      :when condition-result\n      ]\n  true)&quot; &quot;(for [\n      condition-result (get-in @state [:stack :current-run :can-rez-ice :condition])\n      :when condition-result\n      ]\n  \&quot;hello\&quot;)&quot; &quot;(for [\n      condition-result (get-in @state [:stack :current-run :can-rez-ice :condition])\n      :when condition-result\n      ]\n  condition-result)&quot; &quot;(for [\n      condition-result (get-in state [:stack :current-run :can-rez-ice :condition])\n      :when condition-result\n      ]\n  condition-result)&quot; &quot;(get-in @state [:stack :current-run flag :condition])&quot; &quot;(get-in @state [:stack :current-run :can-rez-ice :condition])&quot; &quot;(:condition (get-in @state [:stack :current-run :can-rez-ice]))&quot; &quot;(peek (get-in @state [:stack :current-run :can-rez-ice]))&quot; &quot;(:condition (peek (get-in @state [:stack :current-run :can-rez-ice])))&quot; &quot;(:condition (peek (get-in @state [:stack :current-run :can-rez-ice])) state nil nil)&quot; &quot;((:condition (peek (get-in @state [:stack :current-run :can-rez-ice]))) state nil nil)&quot; &quot;(run-flag? state nil nil :can-rez-ice)&quot; &quot;(register-run-flag! state :test-flag (fn [state side card] true) nil)&quot; &quot;(game.core/register-run-flag! state :test-flag (fn [state side card] true) nil)&quot; &quot;(game.core/register-run-flag! state :test-flag nil nil)&quot; &quot;(load-file \&quot;src/clj/game/core.clj\&quot;)&quot; &quot;(get-in @state [:stack :can-rez-ice])&quot; &quot;(get-in @state [:stack :current-run :can-rez-ice])&quot; &quot;(peek(get-in @state [:stack :current-run :can-rez-ice]))&quot; &quot;((:condition (peek(get-in @state [:stack :current-run :can-rez-ice]))) state nil nil)&quot; &quot;((:condition (peek(get-in @state [:stack :current-run :can-rez-ice]))) state nil {:type \&quot;Ice\&quot;})&quot; &quot;((:condition (peek(get-in @state [:stack :current-run :can-rez-ice]))) state nil {:type \&quot;ICE\&quot;})&quot; &quot;(core/run-flag? state nil {:type \&quot;ICE\&quot;} :can-rez-ice)&quot; &quot;(get-in @state [:corp :servers])&quot; &quot;(pprint state)&quot; &quot;(get-in @state [:run])&quot; &quot;(def state (second (first @game-states)))&quot; &quot;(get-in @state [:stack])&quot; &quot;(get-in @state [:stack :current-turn :can-rez-ice])&quot; &quot;(peek (get-in @state [:stack :current-turn :can-rez-ice]))&quot; &quot;(load-file \&quot;src/clj/game/cards.clj\&quot;)&quot; &quot;(future-call dev)&quot;], :remote []}}</component>
</project>